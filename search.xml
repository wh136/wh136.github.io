<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[读计算机网络感悟]]></title>
    <url>%2F2018%2F05%2F15%2F%E8%AF%BB%E8%B0%A2%E5%B8%8C%E4%BB%81%E7%89%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%84%9F%E6%82%9F%2F</url>
    <content type="text"><![CDATA[读《计算机网络》感悟由于要电话面试新华三公司的网络操作系统软件开发工程师，于是翻开了尘封已久的《计算机网络》，想起了当年老师怎么教我们。来大家一起跟我念I~E~E~E …… 我们讲一讲信道，频分复用，码分复用……..好好的一个计算机课被上成了通信专业。（此处并非黑通信）。学完了以后，考试，来来来，划重点，划的全是什么呀？什么默写OSI七层协议，物理层信噪比公式。我知道你香农shannon牛逼。可是我们也要生活啊。讲真，很多计算机专业的学生毕业了以后能去写代码的有几个？你照着书念起了ppt，念起了书上的基本原理。把一群全国985倒数第一的学生带到坑里去。可怜的的这群孩子，成了教育路上的白白牺牲的小白鼠。这种教学方法还不如不教。我们的大学啊，某些老师，总是谈基础，什么基础最重要了。于是大家信以为真。他们不谈实际应用，只大谈理论。实话说，还不如二本的老师，啥都不管还好一些，至少他们的神经是正常的。要我看，大部分人都要走向生产生活。所以，要多一些实际应用，少一些bb理论。整天空谈理论，给学生们灌输有毒有害的思想。 我们要掌握的知识不多，TCP/IP协议族中的TCP协议，IP协议，ICMP协议。以及能写从协议角度去分析数据传输过程的变化，因此要切合实际，切合所教专业。不能为了考试而学习。我们大部分人要求的是能熟知这些实际的原理，和一些经常用到的东西。要实用主义。我们的某些（比较多）老师，真的是在象牙塔里面呆久了。他们啊，应该去社会上看看一看。他们与社会脱节太严重了，有一种自命清高的知识分子气息。这种气息，危害了整个社会。危害了学生。整天高谈阔论，眼高手低。]]></content>
      <tags>
        <tag>读书笔记， 计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[201805面试总结]]></title>
    <url>%2F2018%2F05%2F10%2F201805%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[考研复试被刷，然后准备找工作。把简历挂到了前程无忧，投递了2家公司。刚刚把4个网站都撸完，就收到了新华三公司的电话面试邀请，岗位是网络操作系统软件开发工程师 网络操作系统软件开发工程师所属部门：H3C-Comware开发部工作地点：杭州面试地点：杭州岗位职责：负责网络操作系统架构及协议设计与开发工作任职要求：1） 计算机、通信或相关专业本科及以上学历，具备较强的英文阅读能力。2） 精通C/C++编程语言，熟悉linux/Unix系统，具有多线程开发经验。3） 熟悉TCP/IP网络协议，具有交换机、路由器开发经验者优先。4） 对虚拟化技术有研究者优先。5） 具备良好的沟通协调能力和团队合作精神，较强的工作责任，能够在一定的压力下独立解决问题 怎么办？我的情况不乐观，大企业就像一个收割机，各人负责各人的工作，没有人听太多闲言碎语。先介绍自己目前的处境。技术方面讲一下，以及要准备些什么。不要考虑成败。只是思考自己要做什么。目前掌握的技术有年久失修（1年多）的Python，不太乐观的计算机网络协议。由于数据结构和操作系统刚考完，还可以笔试下。最近兴趣点全在那个弹性力学可视化计算系统的网站。所以Javascript、css、Html搞得最多。可是我不是专业搞前端的。只是兴趣很浓厚，对这个项目十分喜欢。尽量不要给自己太多的暗示，觉得自己太弱小了。在这个群魔乱舞的时代，能做的只有静修内功，打好基础。有所为，有所不为。在这个比较清净的地方，思索一下，我需要什么？不需要什么？在电话面试环节，首先要介绍自己做哪些东西，然后，兴趣在哪里。细节往往很重要。一般来说没有人能知道你到底做了什么。要可信度强，就要讲细节。1）较强的英文阅读能力指的是能够—阅读API最新技术英文文档，还有源代码英文注释，以及要求写代码的时候变量名英文用词和缩写，如何写英文注释。2）C/C++精通，可以商量，有三个档次。入门、熟悉、精通、我对自己的定位是在入门和熟悉之间靠前一些。语言这块，写10来天C++代码就能应对，这三个档次不是很重要。重要的是面向对象程序设计思维。主要包括数据类型（bool、char、int、float、void、长度取决于编译器和CPU位宽） 先写到这里了，面试完再把全部的知识点补充上去….杭州，哥来了。]]></content>
      <tags>
        <tag>面试日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode猛撸]]></title>
    <url>%2F2018%2F05%2F10%2FleetCode%2F</url>
    <content type="text"><![CDATA[1.两数之和1.给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。示例:123给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 123456789101112131415161718class Solution(object): def twoSum(self, nums, target): """ :type nums: List[int] :type target: int :rtype: List[int] """ list_len = len(nums) for i in range(0, list_len): for j in range(i + 1, list_len): if (nums[i] + nums[j] == target): # print [i, j] return [i, j]# nums = [3, 2, 4]# target = 6# obj = Solution()# obj.twoSum(nums, target) 2.两数相加给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字 0 之外，这两个数字都不会以零开头。示例：123输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = Noneclass Solution(object): def addTwoNumbers(self, l1, l2): """ :type l1: ListNode :type l2: ListNode :rtype: ListNode """ cur1 = ListNode(0) cur2 = cur1 while True: if (l1 is not None) &amp; (l2 is not None): if l1.val + l2.val + cur2.val &gt;= 10: carry_bit = (l1.val + l2.val + cur2.val) / 10 base_bit = (l1.val + l2.val + cur2.val) % 10 cur2.val = base_bit cur2.next = ListNode(0) cur2 = cur2.next cur2.val = carry_bit else: increament = l1.val + l2.val cur2.val += increament if (l1.next is not None) &amp; (l2.next is not None): cur2.next = ListNode(0) cur2 = cur2.next elif (l1.next is None) &amp; (l2.next is None): pass else: cur2.next = ListNode(0) cur2 = cur2.next l1 = l1.next l2 = l2.next elif (l1 is not None) &amp; (l2 is None): if cur2.val + l1.val &gt;= 10: carry_bit = (cur2.val + l1.val) / 10 base_bit = (cur2.val + l1.val) % 10 cur2.val = base_bit cur2.next = ListNode(0) cur2 = cur2.next cur2.val = carry_bit else: cur2.val = cur2.val + l1.val if l1.next is not None: cur2.next = ListNode(0) cur2 = cur2.next else: pass l1 = l1.next elif (l1 is None) &amp; (l2 is not None): if cur2.val + l2.val &gt;= 10: carry_bit = (cur2.val + l2.val) / 10 base_bit = (cur2.val + l2.val) % 10 cur2.val = base_bit cur2.next = ListNode(0) cur2 = cur2.next cur2.val = carry_bit else: cur2.val = cur2.val + l2.val if l2.next is not None: cur2.next = ListNode(0) cur2 = cur2.next else: pass l2 = l2.next else: break return cur1class LinkedList(object): def create(self, lst): head = ListNode(lst[0]) cur = head for i in range(1, len(lst)): cur.next = ListNode(lst[i]) cur = cur.next return head]]></content>
      <tags>
        <tag>Python2.7</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript浅拷贝和深拷贝递归]]></title>
    <url>%2F2017%2F03%2F11%2FJavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D%E9%80%92%E5%BD%92%2F</url>
    <content type="text"><![CDATA[浅拷贝的结果是两个引用指向同一个对象，即同一片内存区域。 浅拷贝1234567var Ethan = &#123;name: 'Ethan Sha', height: '177cm', girlfriend: &#123;name: 'leftHand'&#125;&#125;; // Just a joke, never mind.var Jack = Ethan;Jack.height = '165cm';console.log(Ethan); console.log(Jack); 123456&#123; name: &apos;Ethan Sha&apos;, height: &apos;165cm&apos;, // I&apos;m not girlfriend: &#123; name: &apos;leftHand&apos; &#125; &#125;&#123; name: &apos;Ethan Sha&apos;, height: &apos;165cm&apos;, girlfriend: &#123; name: &apos;leftHand&apos; &#125; &#125; 深拷贝深拷贝的结果是两个引用指向不同对象，即不同内存区域。实现深拷贝需要递归1234567891011121314151617181920212223var Ethan = &#123;name: 'Ethan Sha', height: '177cm', girlfriend: &#123;name: 'leftHand'&#125;&#125;;var Jack;function deepCopy(obj) &#123; var temp = obj.constructor === Array ? [] : &#123;&#125;; if (typeof obj !== 'object') &#123; return obj; &#125; else &#123; for (var i in obj) &#123; temp[i] = deepCopy(obj[i]); &#125; &#125; return temp;&#125;Jack = deepCopy(Ethan);Jack.name = 'Jack Neo';Jack.height = '165cm';Jack.girlfriend.name = 'rightHand';console.log(Ethan);console.log(Jack); 123456&#123; name: &apos;Ethan Sha&apos;, height: &apos;177cm&apos;, girlfriend: &#123; name: &apos;leftHand&apos; &#125; &#125;&#123; name: &apos;Jack Neo&apos;, height: &apos;165cm&apos;, girlfriend: &#123; name: &apos;rightHand&apos; &#125; &#125; 版权声明：本文为博主原创文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>面向对象程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ubuntu,kafka,zookeeper搭建集群服务器]]></title>
    <url>%2F2017%2F02%2F01%2F%E4%BD%BF%E7%94%A8ubuntu%2Ckafka%2Czookeeper%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[本文将粗略描述一台电脑或者多台电脑搭建集群服务器。以此提供分布式发布订阅消息系统，大数据hadoop，简单的机器学习等多种服务需要的运行环境。环境与工具：Windows 10、vmware 14 Pro、ubuntu 16LTS、kafka_2.11-0.11.0.0、zookeeper-3.4.5、xshell5配置：8G内存、256G固态、 1T机械、 GTX 850、Intel i5-CPUkafka：一种高吞吐量的分布式发布订阅消息系统zookeeper：分布式应用程序协调服务，是Hadoop和Hbase的重要组件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。 安装ubuntu16，JDK，kafka，zookeeper并配置vmware 14 pro在虚拟机中安装ubuntu16. 下载ubuntu安装完毕后，进入登录界面，此时登录的是安装时注册的用户。接着创建root用户,再登入root12345wh136@ubuntu:~$ sudo passwd rootEnter new UNIX password: Retype new UNIX password:wh136@ubuntu:~$ suroot@ubuntu:/# 并配置网络，使ubuntu有独立IP地址，也能连接互联网。方便安装JDK,kafka,zookeeper配置网络 互相ping测试网络网络互通。 然后再回到ubunutu安装SSH服务，最后使用xshell5连接到ubunutu123wh136@ubuntu:~$ sudo apt-get install openssh-server //安装SSH服务wh136@ubuntu:~$ sudo ps -e |grep ssh //检查SSH是否启动 有sshd则启动了wh136@ubuntu:~$ sudo service ssh start //启动SSH服务 这样就搭建了第一台服务器，你想搭几台都可以，只要电脑硬件足够好。给每个虚拟机分配足够多的硬件资源就行。注意！在使用完毕后，先把虚拟机中的服务器关闭，再关闭电脑。不能随意关闭，否则有可能造成文件丢失，虚拟机中的系统出现故障。 安装JDK通过ppa(源) 方式安装JDK.(可以通过 apt-get upgrade 方式方便获得jdk的升级)123456root@ubuntu:/# sudo add-apt-repository ppa:webupd8team/java //添加ppa 添加仓库源：root@ubuntu:/# sudo apt-get update //更新软件包列表root@ubuntu:/# sudo apt-get install oracle-java8-installer //安装Oracle-java-installer root@ubuntu:/# sudo update-java-alternatives -s java-8-oracle //设置系统默认jdkroot@ubuntu:/# java -version //测试jdk是否安装成功root@ubuntu:/# javac -version 安装kafka,zookeeper（配置比较麻烦，暂时放一放）12345678910root@ubuntu:/# cd /usr/localroot@ubuntu:/usr/local# wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.5/zookeeper-3.4.5.tar.gz //注意zookeeper的版本号。后续有些操作会有差别。root@ubuntu:/usr/local# wget http://archive.apache.org/dist/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgzroot@ubuntu:/usr/local# lsbin etc games include kafka_2.11-0.11.0.0.tgz lib man sbin share src zookeeper-3.4.5.tar.gzroot@ubuntu:/usr/local# tar -xzvf kafka_2.11-1.0.0.tgz //解压root@ubuntu:/usr/local# tar -xzvf zookeeper-3.4.5.tar.gzroot@ubuntu:/usr/local# cd conf //配置root@ubuntu:/usr/local# cp zoo_sample.cfg zoo.cfg..... //配置待续 版权声明：本文为博主原创文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>集群服务器</tag>
        <tag>分布式</tag>
        <tag>Vmware虚拟机</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[套接字socket在Python中的用法测试]]></title>
    <url>%2F2016%2F11%2F10%2FsocketInPython%2F</url>
    <content type="text"><![CDATA[本部分介绍 socket — Low-level networking interface 偏底层的接口区别于 socketserver — A framework for network 框架 从计算机网络开始OSI七层协议：物理层，数据链路层，网络层，运输层，会话层，表示层，应用层TCP/IP的体系结构：网络接口层，网际层IP，运输层（TCP或UDP），应用层（TELNET,FTP,SMTP）五层协议体系结构：物理层，数据链路层，网络层，运输层，应用层套接字=IP地址 + 端口 + TCP协议或UDP协议 进程与进程之间的网络通信方式或者本机不同进程通过文件系统之间的通信方式 套接字家族选择（socket family）基于文件的套接字：单机套接字，使用文件系统作基础，AF_UNIX或者AF_LOCAL基于网路的套接字：不同主机进程之间通信的套接字，AF_INET和AP_INET6 （AF_INET是用于IPV4,而AF_INET6是用于IPV6）套接字传输数据类型选择（type)TCP协议：通信前需要建立连接，连接是可靠的。使用的套接字类型是SOCK_STREAMUDP协议：无需连接就能通信，速度快，可靠性不高。传输用户数据报格式UDP的数据。使用的套接字类型是SOCK_DGRAM 由于套接字创建以后归属与一个进程。因此，在操作系统课本中有进程的状态与转换（王道计算机操作系统第28页）一个服务端进程的状态如下：创建—&gt;就绪—&gt;运行—&gt;阻塞（一直while循环等待客户端）—&gt;运行（收到请求链接并响应 三次握手）-&gt;终止（关闭服务停止运行） 套接字超时注意事项TCP协议位于传输层，提供可靠的字节流服务Byte Stream Service。由于在用TCP协议，因此要三次握手建立连接，四次挥手关闭连接。如果由于三次握手是需要在一定的时间范围内完成的动作，如果没有完成就超时了。或者三次握手之后，其他通信操作没有及时完成就会出现超时。此时就要做出相应的操作，例如重新执行动作，否则就会失败。套接字对象可以是以下三种模式之一：阻塞，非阻塞或超时。默认情况下，套接字创建后处于阻塞模式，但可以通过调用 setdefaulttimeout() 来更改。在 阻塞模式 中，操作阻塞直到完成或系统返回错误（例如连接超时）。在 非阻塞模式 中，如果无法立即完成操作，那么操作将失败（错误是与系统相关的错误）：来自 select 的函数可用于知道套接字何时可用于读取或写入。在 超时模式 中，如果无法在为套接字指定的超时（它们引发 timeout 异常）或系统返回错误时无法完成操作，则操作将失败。 使用TCP协议套接字用Python2.7实现单线程聊天程序和多线程程序1234567891011121314151617181920212223242526272829303132#仅支持IPV4#server.py#!/usr/bin/python 2.7# -*- coding: utf-8 -*-# @Time : 2017/5/18 22:52# @Author : Ethan Sha# @File : server.py# @Software: PyCharmimport socketHOST = '127.0.0.1'PORT = 21567BUFSIZ = 1024ADDR = (HOST, PORT)tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)tcp_socket.bind(ADDR)tcp_socket.listen(5)while True: print "waiting for connection..." tcp_connection, tcp_address = tcp_socket.accept() print 'connected from:', tcp_address while True: data = tcp_connection.recv(BUFSIZ) if not data: break print 'Jack:' + data data = raw_input('send message&gt; ') tcp_connection.sendall(data) tcp_connection.close()tcp_socket.close() 12345678910111213141516171819202122232425#client.py#!/usr/bin/python 2.7# -*- coding: utf-8 -*-# @Time : 2017/5/18 22:52# @Author : Ethan Sha# @File : client.py# @Software: PyCharmimport socketHOST = 'localhost'PORT = 21567BUFSIZ = 1024ADDR = (HOST, PORT)tcp_socket_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)tcp_socket_client.connect(ADDR)while True: data = raw_input('send message&gt; ') tcp_socket_client.send(data) data = tcp_socket_client.recv(BUFSIZ) if not data: break print 'Ethan:' + datatcp_socket_client.close() 先打开server,再打开client。之后client输入你好，server再输入你也好啊。如此反复即可。要实现类似QQ的聊天。需要多线程或多进程。12345# serverwaiting for connection...connected from: ('127.0.0.1', 63922)Jack:你好send message&gt; 你也好啊 1234# clientsend message&gt; 你好Ethan:你也好啊send message&gt; 多线程聊天程序四个线程，server和client都有两个线程，第一个线程是发送消息，第二个线程是接收消息。123456789101112131415161718192021222324252627282930313233343536373839404142434445# server.py#!/usr/bin/python 2.7# -*- coding: utf-8 -*-# @Time : 2017/5/18 22:52# @Author : Ethan Sha# @File : server.py# @Software: PyCharmimport socketimport threadHOST = '127.0.0.1'PORT = 21567BUFSIZ = 1024ADDR = (HOST, PORT)tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)tcp_socket.bind(ADDR)tcp_socket.listen(5)print "waiting for connection..."tcp_connection, tcp_address = tcp_socket.accept()print 'connected from:', tcp_addressdef send_msg_thread(): while True: msg = raw_input() tcp_connection.sendall(msg)def recv_msg_thread(): while True: data = tcp_connection.recv(BUFSIZ) if not data: break print 'Jack:' + datatry: thread.start_new_thread(send_msg_thread, ()) thread.start_new_thread(recv_msg_thread, ())except: print "Error: unable to start thread"while 1: pass 1234567891011121314151617181920212223242526272829303132333435363738394041# client.py #!/usr/bin/python 2.7# -*- coding: utf-8 -*-# @Time : 2017/5/18 22:52# @Author : Ethan Sha# @File : server.py# @Software: PyCharmimport socketimport threadHOST = 'localhost'PORT = 21567BUFSIZ = 1024ADDR = (HOST, PORT)tcp_socket_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)tcp_socket_client.connect(ADDR)def send_msg_thread(): while True: msg = raw_input() tcp_socket_client.send(msg)def recv_msg_thread(): while True: data = tcp_socket_client.recv(BUFSIZ) if not data: break print 'Ethan:' + datatry: thread.start_new_thread(send_msg_thread, ()) thread.start_new_thread(recv_msg_thread, ())except: print "Error: unable to start thread"# tcp_socket_client.close()while 1: pass 12345# serverwaiting for connection...connected from: ('127.0.0.1', 59918)你好， 多线程聊天程序了解一下~~Jack:兄贵真皮，程序写的溜溜的... 123# clientEthan:你好， 多线程聊天程序了解一下~~兄贵真皮，程序写的溜溜的... 版权所有 转载注明。Thank you]]></content>
      <tags>
        <tag>Python2.7</tag>
        <tag>socket</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单对象访问协议Simple Object Access Protocol(SOAP)]]></title>
    <url>%2F2016%2F10%2F16%2F%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AESOAP%2F</url>
    <content type="text"><![CDATA[预备知识Simple Object Access Protocol是应用程序交换消息数据的一种协议，使用在web服务(Web Service),SOAP是其简写，由于非常容易与Service-oriented architecture(SOA)产生歧义，在2003年SOAP这种缩写被废止了。 一个简单对象访问协议(Simple Object Access Protocol)的消息是一个普通的XML文档，并包含以下元素。1.一个信封元素Envelope element用于定义一个XML文档为简单对象访问协议(Simple Object Access Protocol)的消息。2.一个头元素header element包含头信息3.一个体元素body element包含呼叫和应答信息4.一个过错元素fault element包含问题和状态信息简单对象访问协议Simple Object Access Protocol消息的结构123456789101112131415161718&lt;?xml version="1.0"?&gt;&lt;soap:Envelopexmlns:soap="http://www.w3.org/2003/05/soap-envelope/"soap:encodingStyle="http://www.w3.org/2003/05/soap-encoding"&gt;&lt;soap:Header&gt;...&lt;/soap:Header&gt;&lt;soap:Body&gt;... &lt;soap:Fault&gt; ... &lt;/soap:Fault&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt; 信封元素Envelope element包含Namespace命名空间和encodingStyle Attribute编码格式属性123456789&lt;?xml version="1.0"?&gt;&lt;soap:Envelopexmlns:soap="http://www.w3.org/2003/05/soap-envelope/"soap:encodingStyle="http://www.w3.org/2003/05/soap-encoding"&gt; ... Message information goes here ...&lt;/soap:Envelope&gt; 该协议的消息结构具体信息：简单对象访问协议 在了解完该协议下消息的结构后，需要交换消息，可以使用应用层协议来传输消息，例如SMTP、HTTP、HTTPS。下面以HTTP协议为例，介绍向服务器发送请求股票(IBM股票)价格SOAP消息，服务器返回股票价格SOAP消息。 HTTP协议(Hypertext Transfer Protocol超文本传输协议)HTTP协议是基于TCP/IP协议族进行消息文本传输的协议，一个HTTP客户端连接一个HTTP服务器需要用TCP协议（传输控制协议Transmission Control Protocol）在建立连接之后，客户端可以向服务器发送HTTP请求消息。1234POST /item HTTP/1.1Host: 189.123.255.239Content-Type: text/plainContent-Length: 200 服务器收到请求并且该请求是正确的格式，向客户端发动响应，该响应包含一个状态码表明请求收到。123200 OKContent-Type: text/plainContent-Length: 200 简单对象访问协议绑定(SOAP Binding)通过简单对象访问协议绑定可以进行数据交换，该绑定的原理是使用传输协议（transport protocol）交换SOAP消息。大多数简单对象访问协议绑定（SOAP Binding）的实现模块提供了对HTTP、SMTP协议的绑定HTTP协议是同步的，并且被广泛的应用于生活中。一个SOAP HTTP请求限定了至少两个HTTP头（HTTP headers）Content-Type 和 Content-LengthSMTP协议是异步的，是特殊情况下才用的特效解药。Java对SOAP的实现提供了一个对JMS协议（Java Messaging System）的绑定。Python对SOAP的实现，针对web服务(WebService)有soaplib库，但是在2011年官网停止对该库更新。并且转向另外一个库rpclib Content-Type和Content-LengthSOAP请求和响应的Content-Type头规定了MIME type，消息的MIME type和字符编码被用于规定XML体的请求、响应。1Content-Type: MIMEType; charset=character-encoding 例子12POST /item HTTP/1.1Content-Type: application/soap+xml; charset=utf-8 SOAP请求和响应的Content-Length规定了请求、响应体中的字节数。1Content-Length: bytes 例子123POST /item HTTP/1.1Content-Type: application/soap+xml; charset=utf-8Content-Length: 250 正式开始我们的主菜！股票价格SOAP消息一个含有股票名（IBM）的请求价格消息如下所示，在发送到服务端后，我们将收到SOAP股票价格消息，这个功能的命名空间定义在”http://www.example.org/stock&quot;.SOAP请求123456789101112131415161718POST /InStock HTTP/1.1Host: www.example.orgContent-Type: application/soap+xml; charset=utf-8Content-Length: nnn&lt;?xml version=&quot;1.0&quot;?&gt;&lt;soap:Envelopexmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope/&quot;soap:encodingStyle=&quot;http://www.w3.org/2003/05/soap-encoding&quot;&gt;&lt;soap:Body xmlns:m=&quot;http://www.example.org/stock&quot;&gt; &lt;m:GetStockPrice&gt; &lt;m:StockName&gt;IBM&lt;/m:StockName&gt; &lt;/m:GetStockPrice&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt; SOAP响应1234567891011121314151617HTTP/1.1 200 OKContent-Type: application/soap+xml; charset=utf-8Content-Length: nnn&lt;?xml version=&quot;1.0&quot;?&gt;&lt;soap:Envelopexmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope/&quot;soap:encodingStyle=&quot;http://www.w3.org/2003/05/soap-encoding&quot;&gt;&lt;soap:Body xmlns:m=&quot;http://www.example.org/stock&quot;&gt; &lt;m:GetStockPriceResponse&gt; &lt;m:Price&gt;34.5&lt;/m:Price&gt; &lt;/m:GetStockPriceResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt; 版权声明：本文为博主原创文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>XML</tag>
        <tag>WebService</tag>
        <tag>HTTP协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python解析XML的方法，用于简单对象访问协议（SOAP）]]></title>
    <url>%2F2016%2F09%2F16%2FPython%E8%A7%A3%E6%9E%90XML%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[预备知识Python解析XML三种方法及优缺点1.SAX (simple API for XML ) 需要用户实现回调函数（handler）2.DOM(Document Object Model) DOM需要将XML数据映射到内存中的树，比较慢，比较耗内存3.ElementTree(元素树) 轻量级的DOM 代码可用性好，速度快，消耗内存少 使用ElementTree解析XMLcountry_data.xml1234567891011121314151617181920212223&lt;?xml version="1.0"?&gt;&lt;data&gt; &lt;country name="Liechtenstein"&gt; &lt;rank&gt;1&lt;/rank&gt; &lt;year&gt;2008&lt;/year&gt; &lt;gdppc&gt;141100&lt;/gdppc&gt; &lt;neighbor name="Austria" direction="E"/&gt; &lt;neighbor name="Switzerland" direction="W"/&gt; &lt;/country&gt; &lt;country name="Singapore"&gt; &lt;rank&gt;4&lt;/rank&gt; &lt;year&gt;2011&lt;/year&gt; &lt;gdppc&gt;59900&lt;/gdppc&gt; &lt;neighbor name="Malaysia" direction="N"/&gt; &lt;/country&gt; &lt;country name="Panama"&gt; &lt;rank&gt;68&lt;/rank&gt; &lt;year&gt;2011&lt;/year&gt; &lt;gdppc&gt;13600&lt;/gdppc&gt; &lt;neighbor name="Costa Rica" direction="W"/&gt; &lt;neighbor name="Colombia" direction="E"/&gt; &lt;/country&gt;&lt;/data&gt; 增加，删除，查询，修改等基本功能Python都能够提供支持。下面有简单举例，具体操作API文档有详细例子。为实现简单对象访问协议SOAP相关业务，应能够读取XML文件，根据业务要求，配合整个系统，修改XML，或发送或保存为XML文件。完成实际的需求即可。123456#!/usr/bin/python 2.7# -*- coding: utf-8 -*-import xml.etree.ElementTree as ETtree = ET.parse('country_data.xml')root_1 = tree.getroot()print tostring(root_1) //根元素data 版权声明：本文为博主原创文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>Python2.7</tag>
        <tag>XML</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多进程扫描服务器]]></title>
    <url>%2F2016%2F08%2F14%2F%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%89%AB%E6%8F%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[在电信十所服务器机房里管理众多的服务器，由于个别服务器(华为服务器)纽扣电池有问题，开机启动不正常，于是写出以下Python程序用于扫描服务器是否正常开机。 预备知识需要扫描多个服务器的IP地址。并且只能使用Windows自带Ping.exe程序。于是用到以下Python模块：multiprocessing、subprocess、re这三个模块分别是多进程模块，子进程模块，正则表达式模块123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/python 2.7# -*- coding: utf-8 -*-import subprocessimport refrom time import ctimeimport multiprocessingdef ping_server(ip): p = subprocess.Popen(["PING.EXE", ip], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) out = p.stdout.read().decode('gbk') if re.search("TTL=64", out) is not None: print '%s' % ip, 'OK' else: print '%s' % ip, 'Failed!!!'def main(): print 'Start at ', ctime() process_list = [] args_ip = ['192.168.0.1', '192.168.80.3', '192.168.80.4', '192.168.80.100', '192.168.1.60', '192.168.30.61', '192.168.30.62', '192.168.30.63', '192.168.30.64', '192.168.30.82', '192.168.30.81', '192.168.80.2'] for i in range(0, len(args_ip)): p = multiprocessing.Process(target=ping_server, args=(args_ip[i],)) process_list.append(p) for i in range(0, len(args_ip)): process_list[i].start() for i in range(0, len(args_ip)): process_list[i].join() print 'End at', ctime()if __name__ == '__main__': main() 1234567891011121314Start at Sun Aug 29 21:02:13 2016192.168.0.1 OK192.168.80.3 OK192.168.80.4 OK192.168.1.60 OK192.168.80.100 OK192.168.30.62 OK192.168.80.2 Failed!!!192.168.30.64 OK192.168.30.63 OK192.168.30.82 OK192.168.30.61 OK192.168.30.81 Failed!!!End at Sun Aug 29 21:02:33 2016 结论与改进从结果可以看出某些服务器开机不正常，进而可以做进一步措施。本次扫描只是我们小组的服务器，其他小组还没去管理。如果服务器数量很多，有时候由于异步，打印会比较乱，这时候需要用到信号量中的经典问题生产者与消费者问题来同步进程。下一次改进待到合适再进行。 版权声明：本文为博主原创文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>Python2.7</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python代码笔记]]></title>
    <url>%2F2016%2F08%2F05%2FPython%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[记录入门Python2.7所写代码1234567891011121314151617#!/usr/bin/python 2.7# -*- coding: utf-8 -*-# print '------------------------------------------------------------------------------'# print 'Hello,World!'# print 1 + 2 + \# 4 + 5# print 'hello \nworld'# print "\\nowhere"## print '------------------------------------------------------------------------------'# # Chapter2# print '------------------------------------------------------------------------------'# edward = ['Edward Sony', 42]# john = ['John Smith', 50]# database = [edward, john]# print databasegreeting = 'hello'# print greeting[0], '&amp;', greeting[-1]# number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]# print number[3:6]# print number[:3]# print number[:]# print(number[0:10:2])# print(number[10:0:-2])# print([1, 2, 3]+[4, 5, 6])# print 'me'*10# a = "Hello,World!"# print('Hello' in a)# print 'len =', len(number)# print(max(number))## # List method# print list('Hello')# x = [1, 1, 1]# x[1] = 2# print x# name = ['Jack', 'Rose', 'Hua']# del name[0]# print name# nameValueFor = ['P', 'e', 'r', 'l']# print nameValueFor# nameValueFor[2:] = list('ar')# print nameValueFor# nameValueFor[1:3] = []# print nameValueFor# nameValueFor.append('erl')# print nameValueFor# print nameValueFor.count('r')# a = [1, 2, 3]# b = [4, 5, 6]# a.extend(b)# print a# a.insert(0, -1)# print a# print a.pop()# print a## a.remove(-1)# print a# a.reverse()# print a# a.sort()# print a# b = a.sort()# print b# print 1, 2, 3# print ()# print tuple([1, 2, 3])# print tuple('abc')# print tuple((1, 2, 3))# # Chapter3# print "hello,%s!" % 'world'# from math import pi# print "Pi=%.5f" % pi# from string import Template# s = Template('$x,glorious $x!')# s.substitute(x='slam')# print '%u + %u = %u' % (1, 1, 2)# print '%10f' % pi# print '%10.2f' % pi# print '%.2f' % pi# title = 'Hello,Python'# print 'Dst =', title.find('Python')# seq = ['1', '2', '3', '4', '5']# plus = '+'# print plus.join(seq)# print "ABC".lower()# print "1+2+3+4".split('+')# print "/usr/bin/env".split('/')# # Chapter4 dictionary# phoneBook = &#123;'Alice': '2341', 'Beth': '9102', 'Cecil': '3258'&#125;# print phoneBook# items = [('name', 'Gumby'), ('age', 42)]# print dict(items)# d = dict(items)# print d['name']# print dict(name='Nice', age=42)# print "BasicMethodOfDictionary", "len =", len(phoneBook), "Alice's Phone = ", phoneBook['Alice']# print "Gumby's phone number is %(Alice)s." % phoneBook# # DeepCopy And shallowCopy# from copy import deepcopy# DeepCopyOfPB = deepcopy(phoneBook)# phoneBook.clear()# print "Phone = ", phoneBook# print "DeepCopy = ", DeepCopyOfPB# ShallowCopyOfPB = DeepCopyOfPB.copy()# DeepCopyOfPB.clear()# print "Shallow = ", ShallowCopyOfPB# phoneBook = deepcopy(ShallowCopyOfPB)# print "setdefault(key)", phoneBook.setdefault("Alice")# # Chapter 5# print 'age', 42# import math as foobar# print foobar.sqrt(4)# x, y, z = 1, 2, 3# print x, y, z# x, y = y, x# print x, y, z# values = 1, 2, 3# print values# a, b, c = values# print a# # link valued# from math import sqrt# link1 = link2 = sqrt(4)# print link1, link2# print bool(42)# name = raw_input("What's your name?")# if name.endswith('Hua'):# print "Hello,Mr.Hua"# else:# print "Hello,Stranger"# num = raw_input("Enter a number.")# if num &gt; 0:# print "The number is positive"# elif num &lt; 0:# print "The number is negative"# else:# print "The number is zero"# assert# age = 10# assert 0 &lt; age &lt;100# age = -1# fishNum = 1# assert 10 &lt; fishNum &lt; 100, 'Fish too less'# x = 1# while x &lt;= 100:# print x# x += 1# name = ''# while not name:# name = raw_input("Please enter your name:")# print "Hello,%s" % name# words = ['this', 'is', 'an', 'ex', 'parrot']# for word in words:# print word# d = &#123;'x': 1, 'y': 2, 'z': 3&#125;# for key in d:# print key, 'correspond to', d[key]# for key, value in d.items():# print key, 'correspond to', d[key]# names = ['Anne', 'Beth', 'George', 'Damon']# age = [12, 45, 32, 102]# for i in range(len(names)):# print names[i], 'is', age[i], 'years old'# from math import sqrt# for n in range(99, 0, -1):# root = sqrt(n)# if root == int(root):# print n# break# print [x*x for x in range(10) if x % 3 == 0]# exec "print 'Hello,world'"# from math import sqrt# scope = &#123;&#125;# exec 'sqrt=1' in scope# print sqrt(4)# print scope['sqrt']# eval(raw_input("Enter a exp(Calculate):"))# import math# x = 1# y = math.sqrt# print callable(x)# print callable(y)### def hello(name):# return 'Hello,'+name+'!'# print hello('World')### def square(x):# """Calculate x*x"""# return x*x# print square.__doc__# print square(5)### def test():# print 'This is print'# return# print 'This is not'# print '----------------'# x = test()# print '----------------'# print test()# print '----------------'# print x### def try_to_change(n):# n = 'Mr.Hua'# name = 'Jack'# try_to_change(name)# print name### def change(n):# n[0] = "Mr.Tom"# names = ['Mrs.Entity', 'Mr.Gates']# change(names)# print names### storage = &#123;&#125;# storage['first'] = &#123;&#125;# storage['middle'] = &#123;&#125;# storage['last'] = &#123;&#125;# me = 'Magus lie het'# storage['first']['Magus'] = [me]# storage['middle']['lie'] = [me]# storage['last']['het'] = [me]# print storage['middle']['lie']### # collection method# def print_params(*params):# """single star return a tuple"""# print params# print_params("Testing")# print_params("Tsinghua", "university")### def print_params_stars(**params):# """double star return a dictionary"""# print params# print_params_stars(x=1, y=2, z=3)### # reverse of collection# def add(x, y):# return x+y# params = (1, 2)# print add(*params)### def add_three(x, y, z):# return x+y+z# params_tuple = &#123;'x': 1, 'y': 2, 'z': 3, &#125;# print add_three(**params_tuple)## # domain: variable is a dictionary vars() return a dictionary# x = 1# scope = vars()# scope['x']# scope['x'] += 1# print x## # global variable# x = 1### def change_global():# global x# x += 1### def factorial(n):# if n == 1:# return 1# else:# return n*factorial(n-1)# print factorial(10)### def binary_search(sequence, number, lower, upper):# if lower == upper:# assert number == sequence[upper]# return upper# else:# middle = (lower + upper)//2# if number &gt; sequence[middle]:# return binary_search(sequence, number, middle + 1, upper)# else:# return binary_search(sequence, number, lower, middle)## seq = [50, 21, 32, 22, 94, 80, 1, 6]# seq.sort()# print seq# print "The dst of Number is", binary_search(seq, 22, 0, len(seq)-1) + 1# L = []# n = 1# while n &lt;= 99:# L.append(n)# n += 2# print L# higher-order function:function and variable# x = abs(-10)# print x# print abs# f = abs# y = f(-10)# print y### def add(a, b, function):# return function(a)+function(b)# print "This function program result is:", add(-10, -10, f)# built in function:map and reduce### def f(x):# return x*x# print map(f, [1, 2, 3, 4, 5])## print map(str, [1, 2, 3, 4, 5])## reduce function receive two params x1,x2.Input f get y1,then input f with y1 and x3,and so on### def fn(x, y):# return x*10+y# reduce(fn, [1, 3, 5, 7, 9])### def char2num(s):# return &#123;'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9&#125;[s]## print reduce(fn, map(char2num, '13579'))# print map(char2num, '123456')### def str2int(s):# def fn(x, y):# return x*10+y# def char2num(str_num):# return &#123;'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9&#125;[str_num]# return reduce(fn, map(char2num, s))### def str2int_lambda(s):# return reduce(lambda x, y: x*10+y, map(char2num, s))# transfer the username into regular (nAMe into Name)using map# User = ['adam', 'LISA', 'barT']### def user_reg(user_list):# return user_list.title()### def regular_name(name):# return map(user_reg, name)# print regular_name(User)# # using lambda below### def regular_name_lambda(name):# return map(lambda x: x.title(), name)# print regular_name(User)## # List multiply# a = [50, 32, 7, 12, 56, 18]### def multiply_list_lambda(list_num):# return reduce(lambda x, y: x*y, list_num)# print multiply_list_lambda(a)## # filter-sequence find odd num del rest### def is_odd(n):# return n % 2 == 1# print filter(is_odd, a)## sequence = ['A', '', None, ' ']### def not_empty(s):# return s and s.strip()# print filter(not_empty, sequence)# find all prime number in 0-99 and print the calculate times## from math import sqrt## list_1 = []# list_2 = []# list_3 = []### def is_prime(number):# flag = True# time = 0# global list_1# if number == 2:# return flag# elif number &lt; 2:# return False# for i in range(2, number):# if number % i == 0:# flag = False# time += 1# break# else:# time += 1# list_1.append(time)# return flag### def is_prime_second(number):# flag = True# time = 0# global list_2# if number == 2:## return flag# elif number &lt; 2:# return False# for i in range(2, number/2):# if number % i == 0:# flag = False# time += 1# break# else:# pass# list_2.append(time)# return flag### def is_prime_three(number):# flag = True# time = 0# if number == 2:# return flag# elif number &lt; 2:# return False# for i in range(2, int(sqrt(number))):# if number % i == 0:# flag = False# time += 1# break# else:# pass# list_3.append(time)# return flag### def add(x, y):# return x + y### for i in range(0, 99):# is_prime(i)### for i in range(0, 99):# is_prime_second(i)### for i in range(0, 99):# is_prime_three(i)## print "The prime of sequence is:", filter(is_prime, range(0, 99))# print "Method one cal times:", reduce(add, list_1)# print "The prime of sequence is:", filter(is_prime_second, range(0, 99))# print "Method two cal times:", reduce(add, list_2)# print "The prime of sequence is:", filter(is_prime_three, range(0, 99))# print "Method three cal times:", reduce(add, list_3)# chapter 6# function as a value return :closure program### def lazy_sum(*args):# def sum_test():# ax = 0# for n in args:# ax += n# return ax# return sum_test## f = lazy_sum(1, 3, 5, 7)# print f()## def count():# fs = []# for i in range(1, 4):# def f():# return i*i# fs.append(f)# return fs### f1, f2, f3 = count()# print f1()# print f2()# print f3()# lambda function unnamed# calculate f(x)=x^2# print map(lambda x: x*x, [1, 2, 3, 4])### def f(x):# return x*x## print map(f, [1, 2, 3, 4])## # decorator### def now():# print'2016-9-1'## g = now# print g()# print 'now function name:', now.__name__, 'g function name:', g.__name__## # example 1### def log_decorator(func): # decorator# def wrapper(*args, **kw):# print 'call %s():' % func.__name__# return func(*args, **kw)# return wrapper### @log_decorator# def now_next():## print '2016-10-1'## now_next()## # example 2## def log_decorator(text):# def decorator(func):# def wrapper(*args, **kw):# print '%s %s():' % (text, func.__name__)# return func(*args, **kw)# return wrapper# print 'run decorator'# return decorator### @log_decorator('execute')# def now():# print '2016-10-1'## now()# run sequence:log_decorator()-wrapper()- return func()[now()]- now()-return wrapper- decorator()-return decorator# produce and consumer multi threading# multi processing Unix/Linux fork()## import os# # window didn't include fork()# print 'Process (%s) start.' % os.getpid()## pid = os.fork()## if pid == 0:# print "I am child process (%s) and my parent is %s.", (os.getpid(), os.getppid())# else:# print "I am (%s) just created a child process (%s)." % (os.getppid(), pid)## from multiprocessing import Process# import os## # child process run### def child_run(name):# print 'Run child process %s (%s)...' % (name, os.getpid())# if __name__ == '__main__':# print 'Parent process %s ' % os.getpid()# p = Process(target=child_run, args=('test',))# print "Process will start."# p.start()# p.join()# print 'Process kill'#### from multiprocessing import Process, Queue# import os, time, random#### def write(q):# for value in ['A', 'B', 'C', 'D', 'E']:# print "Put %s to queue" % value# q.put(value)# time.sleep(random.random())### def read(q):# while True:# value = q.get(True)# print "Get %s from queue." % value## if __name__ == '__main__':# q = Queue()# pw = Process(target=write, args=(q,))# pr = Process(target=read, args=(q,))# # reading and writing# pw .start()# pr.start()# # waiting pw end. A, B, C, D, E write finished# pw.join()# # pr is endless a loop,must be terminate# pr.terminate()## # threading thread POSIX# import time,threading# # new thread execute### def loop():# print 'thread %s is running...' % threading.current_thread().name# n = 0# while n &lt; 5:# n += 1# print 'thread %s &gt;&gt;&gt; %s' % (threading.current_thread().name, n)# time.sleep(1)# print 'thread %s ended.' % threading.current_thread().name## print 'thread %s is running...' % threading.current_thread().name# # built thread object using Thread# t = threading.Thread(target=loop, name='LoopThread')# t.start()# t.join()# print 'thread %s ended.' % threading.current_thread().name# Lock:Process copy variable,Thread share one variable# example how Thread change one variable## import time, threading# # this in my bank savings# balance = 0### def change_it(n):# global balance## balance += n# balance -= n### def run_thread(n):# for i in range(100000):# change_it(n)## t1 = threading.Thread(target=run_thread, args=(5,))# t2 = threading.Thread(target=run_thread, args=(8,))## t1.start()# t2.start()# t1.join()# t2.join()# print balance# import threading, Queue, time### class Consumer(threading.Thread):# def __init__(self, queue):# threading.Thread.__init__(self)# self.__queue = queue## def run(self):# while True:# msg = self.__queue.get()# if isinstance(msg, str) and msg == 'quit':# break# print "I am thread, and i received %s" % msg# print 'bye'### def Producer():# queue = Queue.Queue()# worker = Consumer(queue)# worker.start()# start_time = time.time()# while time.time()-start_time &lt; 5:# queue.put('something at %s' % time.time())# time.sleep(1)# queue.put('quit')# worker.join()## if __name__ == '__main__':# Producer()## import threading, zipfile## class AsyncZip(threading.Thread):# def __init__(self, infile, outfile):# threading.Thread.__init__(self)# self.infile = infile# self.outfile = outfile# def run(self):# f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)# f.write(self.infile)# f.close()# print 'Finished background zip of: ', self.infile## background = AsyncZip('mydata.txt', 'myarchive.zip')# background.start()# print 'The main program continues to run in foreground.'## background.join() # Wait for the background task to finish# print 'Main program waited until background was done.'#### def TrimFuc(strs):## head=0# tail=len(strs)# while(head&lt;tail and (strs[head].isspace() or strs[head]=="\x00")):# head += 1# if head == tail:# return ""# while(strs[tail-1].isspace() or strs[tail-1]=="\x00"):# tail -= 1# return strs[head:tail]## strs = ' hello,world\n'# strs1 = 'hello,world\n'# print strs# print '-----------------'# print TrimFuc(strs)# print TrimFuc(strs1)# print '-----------------'## # regular expression## import re# # match success will return a object of match else return None# print re.match(r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$', '010-12345')# print re.match(r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$', '010 12345')# print '-----------------------------------------'# # split string with reExp and common# print re.split(r'\s+', 'a b c')# print 'ab c'.split()# print re.split(r'[\s\,]+', 'a,b, c d')# print re.split(r'[\s\,\;]+', 'a,b;; c d')# # group substring# m = re.match(r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$', '010-12345')# print m# print m.group(0)# print m.group(1)# print m.group(2)## print re.match(r'^(\d+)(0*)$', '102300').groups()# print re.match(r'^(\d+?)(0*)$', '102300').groups()## re_telephone = re.compile(r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$')# print re_telephone.match('010-8086').groups()## print'--------------------------------------'# print re.match(r'[a-z]', 'a44')## json# import json# obj = [[1, 2, 3], 1992, 6.12, 'Sam', &#123;'key': (4, 5, 6), 'Tom': (7, 8, 9)&#125;]# encode_json = json.dumps(obj)# print repr(obj)# print encode_json# print 'encode_json_type', type(encode_json)# decode_json = json.loads(encode_json)# print 'decode_json_type', type(decode_json)# print decode_json[4]['key']# print decode_json# import re## fields = "oracle_username=xiaweihua"# print re.sub('oracle_username=', '', fields)# file_t = open('hello.data', 'w')# for line in range(0, 9):# file_t.write(str(line)+'\n')# file_t.close()## file_r = open('hello.data', 'r')# print '--------'# for line in range(0, 9):# print file_r.readline()# print '---------'## file_r.close()# conn = cx_Oracle.connect('themis', 'themis', '192.168.1.60/testdb')# dsn_tns = cx_Oracle.makedsn('themis', 'themis', '192.168.1.60/testdb')# c = conn.cursor()# data = c.execute('desc t_redlist')# print data.fetchall()# encoding decoding formal# tup = ('abc', '123', '\xce\xf7\xb0\xb2')# print tup[2].decode('gbk')## from random import randint# from time import sleep, ctime# from Queue import Queue# import threading### class MyThread(threading.Thread):# def __init__(self, func, args, name=''):# threading.Thread.__init__(self)# self.name = name# self.func = func# self.args = args## def get_result(self):# return self.res## def run(self):# print 'starting', self.name, 'at', ctime()# self.res = self.func(*self.args)# print self.name, 'finished at:', ctime()### def write_queue(queue):# print 'produce apple for queue...'# queue.put('apple', 1)# print 'apple number now is:', queue.qsize()### def read_queue(queue):# val = queue.get(1)# print 'consume a %s from queue...' % val# print 'apple number now is:', queue.qsize()### def writer(queue, loops):# for i in range(loops):# write_queue(queue)# sleep(randint(1, 3))### def reader(queue, loops):# for i in range(loops):# read_queue(queue)# sleep(randint(2, 5))### funcs = [writer, reader]# nfuncs = range(len(funcs))### def main():# nloops = randint(2, 5)# q = Queue(32)## threads = []# for i in nfuncs:# t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)# threads.append(t)## for i in nfuncs:# threads[i].start()## for i in nfuncs:# threads[i].join()## print 'all done'## if __name__ == '__main__':# main()# transform dictionary to XMLfrom xml.etree.ElementTree import Element, SubElement, tostringfrom xml.dom.minidom import parseString# BOOKs = &#123;# '013269937': &#123;# 'title': 'Core Python Programming',# 'edition': 2,# 'year': 2006,# &#125;,# '0132356139': &#123;# 'title': 'Python web development with Django',# 'authors': 'Jeff Forcier:Paul Bissex:Wesley Chun',# 'year': 2009,# &#125;,# '0137143419': &#123;# 'title': 'Python Fundamentals',# 'year': 2009,# &#125;,# &#125;# books = Element('books')# for isbn, info in BOOKs.iteritems():# book = SubElement(books, 'book')# info.setdefault('authors', 'Wesley Chun')# info.setdefault('edition', 1)# for key, val in info.iteritems():# SubElement(book, key).text = ', '.join(str(val).split(':'))## xml = tostring(books)# print '****Raw XML****'# print xml## print '\n***Pretty Printed XML'# dom = parseString(xml)# print dom.toprettyxml(' ')### print '***Flat Structure***'# for elmt in books.iter():# print elmt.tag, '-', elmt.text## print '\n****Titles Only****'# for book in books.findall('.//title'):# print book.textpointfile = open('test.txt', 'w')pointfile.write('Hello, world')pointfile.close()file_read = open('test.txt', 'r')print file_read.read(4)print file_read.read()write_again = open('test.txt', 'w')write_again.write('write again.')write_again.close() 版权声明：本文为博主制作文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>Python2.7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[协议分析和流量统计]]></title>
    <url>%2F2016%2F06%2F10%2F%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E5%92%8C%E6%B5%81%E9%87%8F%E7%BB%9F%E8%AE%A1%E4%BA%8B%E5%85%B3%E5%AE%89%E5%85%A8%E9%9A%90%E7%A7%81%2F</url>
    <content type="text"><![CDATA[协议与数据传输现如今社会。物联网的发展需要很多复杂的技术，尽管如此，人类需要更多便捷的自动化。FaceBook CEO Zuckerberg建立了自己的人工智能管家，他说：“每年我都会设定一个小目标，2016 年的是给家里弄个人工智能系统，就像钢铁侠里的贾维斯那样。这个人工智能系统它要能识别我的声音，这样能控制音乐、灯光、温度等等。另外，它还要能识别我亲戚朋友的脸，能自己给他们开门。如果我女儿 Max 房间里有任何异常状况，这个系统要第一时间通知我。除了用于生活，它还要能用于 VR 里的数据可视化工作….”不仅如此工业控制器系统的发展也是十分迅速。工业革命的道路上，工厂的机器人也要联网。然而安全问题一直是朦胧的状态。下面介绍一下对工业控制系统安全方向较强的学术团队的工作。哈尔滨工程大学灯塔实验室研究方向主要包括：人工智能及机器学习算法研究、工业控制信息系统安全研究、知识管理与仿真技术建模、信息隐藏与数字水印等灯塔实验室 该网站上有一篇文章&lt;&lt;超过8800个工业物联网云中心暴露于公网－DTU数据中心态势感知报告&gt;&gt;本文将引入协议和数据传输方面的基础原理和工具。 引入正题 协议分析和流量统计在数据没有加密的情况下，无论是物联网还是工业控制系统，他们都需要交换数据，服从控制。在公有协议（TCP/IP协议族等）的基础上开发私有协议。通过抓包程序分析网络数据包的协议头和尾，从而了解信息和相关的数据包在产生和传输过程中的行为。如果数据被加密了，可以进行流量统计。因此要尝试攻击网站，数据库之类的都可以进行此类分析。 基础原理和工具首先从日常开发着手，先介绍fiddler和wireshark两个同类抓包工具。当启动fiddler，fiddler将会把自己作为一个代理，所有的http请求在达到目标服务器之前都会经过fiddler，同样的，所有的http响应都会在返回客户端之前流经fiddler默认情况下，fiddler是不会捕获https会话的，所以需要自行设置。在某些情况下，fiddler抓包能力不如wireshark。wireshark配置比fiddler麻烦一些，如果不配代理，需要安装个Connectify来建立热点，然后再安装wireshark进行抓包，如果配置了代理，直接安装wireshark即可。 版权声明：本文为博主原创文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>抓包</tag>
        <tag>fiddler&amp;wireshark</tag>
        <tag>协议分析</tag>
        <tag>流量统计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML编码规范]]></title>
    <url>%2F2016%2F03%2F06%2FHTML%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[语法用两个空格来代替tab 这是唯一能保证在所有环境下获得一致展现的方法。嵌套元素应当缩进一次（即两个空格）。对于属性的定义，确保全部使用双引号，绝不要使用单引号。不要在自闭合（self-closing）元素的尾部添加斜线 HTML5 规范中明确说明这是可选的。不要省略可选的结束标签（closing tag）（例如，&lt;/li&gt; 或 &lt;/body&gt;）。去除不必要的空格（例如：&lt;/Test&gt;）12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;img src="images/logo.png" alt="Company"&gt; &lt;h1 class="hello-world"&gt;Hello, world!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; HTML5 doctype为每个 HTML 页面的第一行添加标准模式（standard mode）的声明，这样能够确保在每个浏览器中拥有一致的展现。 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;/html&gt; 语言属性根据 HTML5 规范：强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。(盲人浏览器了解一下…) &lt;html lang="zh-CN"&gt; &lt;!-- ... --&gt; &lt;/html&gt; IE 兼容模式IE 支持通过特定的 &lt;meta&gt; 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 edge mode，从而通知 IE 采用其所支持的最新的模式。 &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge"&gt; 字符编码通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码）。 &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;/head&gt; 引入 CSS 和 JavaScript 文件根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 type 属性，因为 text/css 和 text/javascript 分别是它们的默认值。 &lt;!-- External CSS --&gt; &lt;link rel="stylesheet" href="code-guide.css"&gt; &lt;!-- In-document CSS --&gt; &lt;style&gt; /* ... */ &lt;/style&gt; &lt;!-- JavaScript --&gt; &lt;script src="code-guide.js"&gt;&lt;/script&gt; 属性顺序HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。classid, namedata- &#42;src, for, type, hreftitle, altaria-&#42;, roleclass 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。 &lt;a class="..." id="..." data-modal="toggle" href="#"&gt; Example link &lt;/a&gt; &lt;input class="form-control" type="text"&gt; &lt;img src="..." alt="..."&gt; 减少标签的数量编写 HTML 代码时，尽量避免多余的父元素。请看下面的案例： &lt;!-- Bad --&gt; &lt;span class="avatar"&gt; &lt;img src="..."&gt; &lt;/span&gt; &lt;!-- Good --&gt; &lt;img class="avatar" src="..."&gt; JavaScript 生成的标签通过 JavaScript 生成的标签让内容变得不易查找、编辑，并且降低性能。能避免时尽量避免。 版权声明：本文为博主制作文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS编码规范]]></title>
    <url>%2F2016%2F03%2F05%2FCSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[语法用两个空格来代替tab 这是唯一能保证在所有环境下获得一致展现的方法。为选择器分组时，将单独的选择器单独放在一行。为了代码的易读性，在每个声明块的左花括号前添加一个空格。声明块的右花括号应当单独成行。每条声明语句的 : 后应该插入一个空格。为了获得更准确的错误报告，每条声明都应该独占一行。所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，box-shadow）。对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，.5 代替 0.5；-.5px 代替 -0.5px）。十六进制值应该全部小写，例如，#fff。尽量使用简写形式的十六进制值，例如，用 #fff 代替 #ffffff。为选择器中的属性添加双引号，例如，input[type=”text”]。避免为 0 值指定单位，例如，用 margin: 0; 代替 margin: 0px;1234567891011121314151617/* Bad */.selector, .selector-secondary, .selector[type=text] &#123; padding:15px; margin:0px 0px 15px; background-color:rgba(0, 0, 0, 0.5); box-shadow:0px 1px 2px #CCC,inset 0 1px 0 #FFFFFF&#125;/* Good */.selector,.selector-secondary,.selector[type="text"] &#123; padding: 15px; margin-bottom: 15px; background-color: rgba(0,0,0,.5); box-shadow: 0 1px 2px #ccc, inset 0 1px 0 #fff;&#125; 单行规则声明对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。这样做的关键因素是为了错误检测例如，校验器指出在 183 行有语法错误。如果是单行单条声明，你就不会忽略这个错误；如果是单行多条声明的话，你就要仔细分析避免漏掉错误了。123456789101112131415/* Single declarations on one line */.span1 &#123; width: 60px; &#125;.span2 &#123; width: 140px; &#125;.span3 &#123; width: 220px; &#125;/* Multiple declarations, one per line */.sprite &#123; display: inline-block; width: 16px; height: 15px; background-image: url(../img/sprite.png);&#125;.icon &#123; background-position: 0 0; &#125;.icon-home &#123; background-position: 0 -20px; &#125;.icon-account &#123; background-position: 0 -40px; &#125; 声明顺序相关的属性声明应当归为一组，并按照下面的顺序排列： PositioningBox modelTypographicVisual由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。1234567891011121314151617181920212223242526272829.declaration-order &#123; /* Positioning */ position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100; /* Box-model */ display: block; float: right; width: 100px; height: 100px; /* Typography */ font: normal 13px "Helvetica Neue", sans-serif; line-height: 1.5; color: #333; text-align: center; /* Visual */ background-color: #f5f5f5; border: 1px solid #e5e5e5; border-radius: 3px; /* Misc */ opacity: 1;&#125; 不要使用 @import与 &lt;link&gt; 标签相比，@import 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。1234567&lt;!-- Use link elements --&gt;&lt;link rel="stylesheet" href="core.css"&gt;&lt;!-- Avoid @imports --&gt;&lt;style&gt; @import url("more.css");&lt;/style&gt; 媒体查询（Media query）的位置将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。实例如：123456789.element &#123; ... &#125;.element-avatar &#123; ... &#125;.element-selected &#123; ... &#125;@media (min-width: 480px) &#123; .element &#123; ...&#125; .element-avatar &#123; ... &#125; .element-selected &#123; ... &#125;&#125; 带前缀的属性当使用特定的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。12345/* Prefixed properties */.selector &#123; -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.15); box-shadow: 0 1px 2px rgba(0,0,0,.15);&#125; 简写形式的属性声明在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常见的滥用简写属性声明的情况如下： paddingmarginfontbackgroundborderborder-radius大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如，HTML 的 heading 元素只需要设置上、下边距（margin）的值，因此，在必要的时候，只需覆盖这两个值就可以。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。12345678910111213141516/* Bad example */.element &#123; margin: 0 0 10px; background: red; background: url("image.jpg"); border-radius: 3px 3px 0 0;&#125;/* Good example */.element &#123; margin-bottom: 10px; background-color: red; background-image: url("image.jpg"); border-top-left-radius: 3px; border-top-right-radius: 3px;&#125; 注释代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。 class 命名class 名称中只能出现小写字符和破折号（不是下划线）。破折号应当用于相关 class 的命名（例如，.btn 和 .btn-danger）。避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。class 名称应当尽可能短，并且意义明确。使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。基于最近的父 class 或基本 class 作为新 class 的前缀。123456789/* Bad example */.t &#123; ... &#125;.red &#123; ... &#125;.header &#123; ... &#125;/* Good example */.tweet &#123; ... &#125;.important &#123; ... &#125;.tweet-header &#123; ... &#125; 代码组织以组件为单位组织代码段。使用一致的空白符将代码分隔成块，这样利于扫描较大的文档。如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动。 版权声明：本文为博主制作文章，转载时注明，谢谢。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo入门]]></title>
    <url>%2F2016%2F01%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
